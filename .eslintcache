[{"/projects/React/codeground/todoist-clone/src/index.js":"1","/projects/React/codeground/todoist-clone/src/reportWebVitals.js":"2","/projects/React/codeground/todoist-clone/src/App.js":"3","/projects/React/codeground/todoist-clone/src/components/layout/Header.js":"4","/projects/React/codeground/todoist-clone/src/components/layout/Content.js":"5","/projects/React/codeground/todoist-clone/src/context/index.js":"6","/projects/React/codeground/todoist-clone/src/components/Tasks.js":"7","/projects/React/codeground/todoist-clone/src/components/layout/Sidebar.js":"8","/projects/React/codeground/todoist-clone/src/context/projects-context.js":"9","/projects/React/codeground/todoist-clone/src/context/selected-project-context.js":"10","/projects/React/codeground/todoist-clone/src/components/Checkbox.js":"11","/projects/React/codeground/todoist-clone/src/components/AddTask.js":"12","/projects/React/codeground/todoist-clone/src/components/AddProject.js":"13","/projects/React/codeground/todoist-clone/src/components/Projects.js":"14","/projects/React/codeground/todoist-clone/src/constants/index.js":"15","/projects/React/codeground/todoist-clone/src/helpers/index.js":"16","/projects/React/codeground/todoist-clone/src/hooks/index.js":"17","/projects/React/codeground/todoist-clone/src/firebase.js":"18","/projects/React/codeground/todoist-clone/src/components/ProjectOverlay.js":"19","/projects/React/codeground/todoist-clone/src/components/TaskDate.js":"20","/projects/React/codeground/todoist-clone/src/components/IndividualProject.js":"21"},{"size":502,"mtime":1609093922263,"results":"22","hashOfConfig":"23"},{"size":362,"mtime":1609093397231,"results":"24","hashOfConfig":"23"},{"size":671,"mtime":1609396628865,"results":"25","hashOfConfig":"23"},{"size":1501,"mtime":1609407844297,"results":"26","hashOfConfig":"23"},{"size":216,"mtime":1609393669957,"results":"27","hashOfConfig":"23"},{"size":376,"mtime":1609393669961,"results":"28","hashOfConfig":"23"},{"size":1311,"mtime":1609405270742,"results":"29","hashOfConfig":"23"},{"size":2402,"mtime":1609404131625,"results":"30","hashOfConfig":"23"},{"size":446,"mtime":1609393669961,"results":"31","hashOfConfig":"23"},{"size":539,"mtime":1609393669961,"results":"32","hashOfConfig":"23"},{"size":543,"mtime":1609405321300,"results":"33","hashOfConfig":"23"},{"size":5191,"mtime":1609404446828,"results":"34","hashOfConfig":"23"},{"size":2135,"mtime":1609404318481,"results":"35","hashOfConfig":"23"},{"size":1151,"mtime":1609404707079,"results":"36","hashOfConfig":"23"},{"size":145,"mtime":1609393669961,"results":"37","hashOfConfig":"23"},{"size":1939,"mtime":1609393669961,"results":"38","hashOfConfig":"23"},{"size":2249,"mtime":1609393669961,"results":"39","hashOfConfig":"23"},{"size":432,"mtime":1609097400504,"results":"40","hashOfConfig":"23"},{"size":1043,"mtime":1609404594256,"results":"41","hashOfConfig":"23"},{"size":2081,"mtime":1609404796955,"results":"42","hashOfConfig":"23"},{"size":1827,"mtime":1609404549510,"results":"43","hashOfConfig":"23"},{"filePath":"44","messages":"45","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},"101kexn",{"filePath":"47","messages":"48","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"51","messages":"52","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"53","messages":"54","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"55","messages":"56","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"57","messages":"58","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"59","usedDeprecatedRules":"46"},{"filePath":"60","messages":"61","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"62","messages":"63","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"64","messages":"65","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"66","usedDeprecatedRules":"46"},{"filePath":"67","messages":"68","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"69","messages":"70","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"71","messages":"72","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"73","messages":"74","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"75","messages":"76","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"77","messages":"78","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"79","messages":"80","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"81","usedDeprecatedRules":"46"},{"filePath":"82","messages":"83","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"84","messages":"85","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"86","usedDeprecatedRules":"46"},{"filePath":"87","messages":"88","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"89","messages":"90","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/projects/React/codeground/todoist-clone/src/index.js",[],["91","92"],"/projects/React/codeground/todoist-clone/src/reportWebVitals.js",[],"/projects/React/codeground/todoist-clone/src/App.js",[],"/projects/React/codeground/todoist-clone/src/components/layout/Header.js",[],"/projects/React/codeground/todoist-clone/src/components/layout/Content.js",[],"/projects/React/codeground/todoist-clone/src/context/index.js",[],"/projects/React/codeground/todoist-clone/src/components/Tasks.js",["93"],"import React, {useState, useEffect} from \"react\";\nimport { useProjectsValue, useSelectedProjectValue } from \"../context\";\nimport {collatedTasks} from '../constants/index';\nimport {getCollatedTitle, getTitle, collatedTasksExist} from '../helpers';\nimport { useTasks } from \"../hooks\";\nimport { Checkbox } from \"./Checkbox\";\nimport { AddTask } from \"./AddTask\";\n\nexport const Tasks = () => {\n  const {selectedProject} = useSelectedProjectValue();\n  const {projects} = useProjectsValue();\n  const {tasks} = useTasks(selectedProject);\n  let projectName = \"\";\n  \n  if (projects.length > 0 && selectedProject && !collatedTasksExist(selectedProject) ) {\n    projectName = getTitle(projects, selectedProject).name;\n  }\n\n  if (collatedTasksExist(selectedProject) && selectedProject) {\n    projectName = getCollatedTitle(collatedTasks, selectedProject).name\n  }\n\n  useEffect(() => {\n    document.title = `${projectName}: Todoist`\n    })\n\n\n\n  return (\n    <div className=\"tasks\" data-testid=\"tasks\">\n      <h2 data-testid=\"project-name\">{projectName}</h2>\n      <ul className=\"tasks__list\">\n        {tasks.map((task) => (\n          <li key={task.id}>\n            <Checkbox id={task.id} taskDesc={task.task}/>\n            <span>{task.task}</span>\n          </li>\n        ))}\n      </ul>\n      <AddTask/>\n    </div>\n  );\n};\n","/projects/React/codeground/todoist-clone/src/components/layout/Sidebar.js",[],"/projects/React/codeground/todoist-clone/src/context/projects-context.js",[],"/projects/React/codeground/todoist-clone/src/context/selected-project-context.js",["94"],"import { createContext, useContext, useState } from \"react\";\nimport { useProjects } from \"../hooks\";\n\nexport const SelectedProjectContext = createContext();\n\nexport const SelectedProjectProvider = ({ children }) => {\n  const [selectedProject, setSelectedProject] = useState('INBOX');\n\n  return (\n    <SelectedProjectContext.Provider\n      value={{ selectedProject, setSelectedProject }}\n    >\n      {children}\n    </SelectedProjectContext.Provider>\n  );\n};\n\nexport const useSelectedProjectValue = () => useContext(SelectedProjectContext);\n","/projects/React/codeground/todoist-clone/src/components/Checkbox.js",[],"/projects/React/codeground/todoist-clone/src/components/AddTask.js",[],"/projects/React/codeground/todoist-clone/src/components/AddProject.js",[],"/projects/React/codeground/todoist-clone/src/components/Projects.js",[],"/projects/React/codeground/todoist-clone/src/constants/index.js",[],"/projects/React/codeground/todoist-clone/src/helpers/index.js",[],"/projects/React/codeground/todoist-clone/src/hooks/index.js",["95"],"import React, { useState, useEffect } from \"react\";\nimport { firebase } from \"../firebase\";\nimport moment from \"moment\";\n\nimport { collatedTasksExist } from \"../helpers/index\";\n\nexport const useTasks = (selectedProject) => {\n  const [tasks, setTasks] = useState([]);\n  const [archivedTasks, setArchivedTasks] = useState([]);\n\n  useEffect(() => {\n    let unsubscribe = firebase\n      .firestore()\n      .collection(\"tasks\")\n      .where(\"userId\", \"==\", \"U1dwd4b3Z1Wdnl7vzmb5\");\n\n    unsubscribe =\n      selectedProject && !collatedTasksExist(selectedProject)\n        ? (unsubscribe = unsubscribe.where(\"projectId\", \"==\", selectedProject))\n        : selectedProject === \"TODAY\"\n        ? (unsubscribe = unsubscribe.where(\n            \"date\",\n            \"==\",\n            moment().format(\"DD/MM/YY\")\n          ))\n        : selectedProject === \"INBOX\" || selectedProject === 0\n        ? (unsubscribe = unsubscribe.where(\"date\", \"==\", \"\"))\n        : unsubscribe;\n\n    unsubscribe = unsubscribe.onSnapshot((snapshot) => {\n      const newTasks = snapshot.docs.map((task) => ({\n        id: task.id,\n        ...task.data(),\n      }));\n\n      setTasks(\n        selectedProject === \"NEXT_7\"\n          ? newTasks.filter(\n              (task) =>\n                moment(task.date, \"DD-MM-YYYY\").diff(moment(), \"days\") <= 7 &&\n                task.archived !== true\n            )\n          : newTasks.filter((task) => task.archived !== true)\n      );\n\n      setArchivedTasks(newTasks.filter((task) => task.archived !== false));\n    });\n\n    return () => unsubscribe();\n  }, [selectedProject]);\n\n  return { tasks, archivedTasks };\n};\n\nexport const useProjects = () => {\n  const [projects, setProjects] = useState([]);\n\n  useEffect(() => {\n    firebase\n      .firestore()\n      .collection(\"projects\")\n      .where(\"userId\", \"==\", \"U1dwd4b3Z1Wdnl7vzmb5\")\n      .orderBy(\"projectId\")\n      .get()\n      .then((snapshot) => {\n        const allProjects = snapshot.docs.map((project) => ({\n          docId: project.id,\n          ...project.data(),\n        }));\n\n        if (JSON.stringify(allProjects) !== JSON.stringify(projects)) {\n          setProjects(allProjects);\n        }\n      });\n    return () => {};\n  }, [projects]);\n\n  return { projects, setProjects };\n};\n","/projects/React/codeground/todoist-clone/src/firebase.js",[],"/projects/React/codeground/todoist-clone/src/components/ProjectOverlay.js",["96","97"],"import React, { useState, useEffect } from \"react\";\nimport { useProjectsValue } from \"../context\";\n\nexport const ProjectOverlay = ({\n  setProject,\n  showProjectOverlay,\n  setShowProjectOverlay,\n}) => {\n  const { projects } = useProjectsValue();\n\n  return (\n    projects &&\n    showProjectOverlay && (\n      <div className=\"project-overlay\" data-testid=\"project-overlay\">\n        <ul className=\"project-overlay__list\">\n          {projects.map((project) => (\n            <li\n              key={project.projectId}\n              data-testid=\"project-overlay-action\"\n\n            >\n              <div onClick={() => {\n                setProject(project.projectId);\n                setShowProjectOverlay(false);\n              }} onKeyDown={() => {\n                setProject(project.projectId);\n                setShowProjectOverlay(false);\n              }} tabIndex={0} role=\"button\" aria-label=\"Select the task project\">\n                {project.name}\n\n              </div>\n            </li>\n          ))}\n        </ul>\n      </div>\n    )\n  );\n};\n","/projects/React/codeground/todoist-clone/src/components/TaskDate.js",[],"/projects/React/codeground/todoist-clone/src/components/IndividualProject.js",[],{"ruleId":"98","replacedBy":"99"},{"ruleId":"100","replacedBy":"101"},{"ruleId":"102","severity":1,"message":"103","line":1,"column":16,"nodeType":"104","messageId":"105","endLine":1,"endColumn":24},{"ruleId":"102","severity":1,"message":"106","line":2,"column":10,"nodeType":"104","messageId":"105","endLine":2,"endColumn":21},{"ruleId":"102","severity":1,"message":"107","line":1,"column":8,"nodeType":"104","messageId":"105","endLine":1,"endColumn":13},{"ruleId":"102","severity":1,"message":"103","line":1,"column":17,"nodeType":"104","messageId":"105","endLine":1,"endColumn":25},{"ruleId":"102","severity":1,"message":"108","line":1,"column":27,"nodeType":"104","messageId":"105","endLine":1,"endColumn":36},"no-native-reassign",["109"],"no-negated-in-lhs",["110"],"no-unused-vars","'useState' is defined but never used.","Identifier","unusedVar","'useProjects' is defined but never used.","'React' is defined but never used.","'useEffect' is defined but never used.","no-global-assign","no-unsafe-negation"]